 Para probar los cambios primero ejecuta nuevamente el archivo de sqLite.sql en SQLITE3 el que tiene
  el codigo de la base de datos porque la base de datos se
 actualizo con las tablas para los deportes y los campos nuevos en algunas tablas.

 En ./utils/const.js estan los enums que se mandan en el zod para validar y los que estan permitidos para hacer
 solicitudes en "bets.http" y "events.http"


Antes de hacer apuestas los usuarios deben tener el balance necesario, entonces haz una solicitud para a√±adir el balance
o modificalo directamente en la bd en SQLITE3

 Para crear un evento y una apuesta:
1 Primero haz un login de un usuario registrado y guarda ese token de momento para enviarlo en las solicitudes de
    apuestas

2 Crea un evento con el nombre de dos equipos rivales  en minuscula preferiblemente y separados por un "vs" entre el nombre.
    Ejemplo: "america vs chivas" y en sport envia alguno de los permitidos en el archivo const.js

3 Crea una apuesta con un type donde tambien se debe colocar uno de los disponibles en const.js y un target que debe
    coincidir con el type. Por ejemplo si en type colocas "ganador" en target deberas enviar el nombre del equipo al que
    se va apostar tal como se envio al crear el evento, siguiendo el ejemplo seria "america" es decir que esta apuesta
    es a que gana el partido el equipo del america. Tambien se envia el amount o lo que se va a apostar y el extra que
    es el momio por el cual se multiplicara el amount si gana.
    (si no hay saldo suficiente no se permite hacer la apuesta)

4 SI LA APUESTA ES 1 VS 1 de algun deporte debes hacer el login de otro usuario para simular como se acepta la apuesta
    hacer el login y sacar su token para enviarlo en la solicitud de aceptar apuesta junto con el id de la apuesta creada
    por el usuario emisor.

5 Ya que se hizo la apuesta normal o 1 vs 1 actualiza las estadisticas del partido usando el endpoint correspondiente,
    para eso necesitas el id del evento creado, cada estadistica especificada y el tipo de deporte.

6 Despues cierra el evento para simular que termino con el endpoint correspondiente, se necesita el id del evento y el resultado
    que por defecto es "pendiente" esto en lo que la funcion que revisa los eventos y apuestas finalizadas se ejecuta para
    determinar el ganador de las apuestas. El intervalo en el que se ejecuta la funcion es de 60 segundos por lo que se comprueba
    si los resultados son los esperados en la consola

** SIEMPRE QUE SE VAYA A HACER UN EVENTO 1 VS 1 SE DEBE COLOCAR DESDE LA SOLICITUD DE CREAR EVENTO Y EN LA APUESTA SOLO DETECTA LA CATEGORIA
 QUE EN ESE CASO SERIA "1 vs 1 deporte" y tambien es importante escribirlo como en el const.js donde esta CATEGORY


USAR LAS SOLICITUDES SEARCH EN EVENTS Y BETS

La solicitud search recibe n parametros y es dinamico, hace busquedas por reigstros segun los parametros enviados.
En el caso de bet hay dos rutas, una para cuando se tiene el token del usuario y se desea enviar y otra cuando no
se tiene el token y se quiere buscar informacion en general.
la ruta de search/auth es para cuando el usuario quiere buscar informacion porque el metodo hace
SELECT * FROM bets WHERE id_user = id_del_usuario AND ... De modo que solo puede buscar informacion de el, por eso hay dos rutas
la otra ruta no necesita el id_user.

Se busca de la siguiente manera:

GET http://localhost:1234/bet/search?campo_de_la_tabla=valor
Ejemplo: GET http://localhost:1234/bet/search?status=FINALIZADA
Ejemplo: GET http://localhost:1234/bet/search?type=goles&category=soccer

el & separa los parametros como el AND

Para la solicitud que utiliza el token:
GET http://localhost:1234/bet/search/auth
Authorization: Bearer token

Este devolvera todas las apuestas que tiene el usuario porque el unico parametro es su token y por ende su id

Ejemplo con el metodo del token en bets con parametros:
GET http://localhost:1234/bet/search/auth?result=ganada
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZF91c2VyIjoiYzljNTUzYmMtMzRiZi00MjJmLWJhMWUtNzcwYWFkZDk2MDIzIiwidXNlcm5hbWUiOiJTYXVsIiwiaWF0IjoxNzQ0Njc0OTEwLCJleHAiOjE3NDQ2Nzg1MTB9.1OIZj-KI3QO3Z9wc0E5qS5Xoac1iznY0aeFZuMUPeXg



PROBLEMAS:
Problema con quitar el backdrop de los modales en app.js o main.hmtl
Problema con el backdrop de admin.js y events.html

Agregar la funcion de app.js de los modales de confirmacion a todos los fetch

Acomodar los eventos correctamente para que no salgan outcomes ditintos

Hacer el fetch para hacer las apuestas 1 vs 1. Flujo:
    Se elige el usuario al cual retar. Se selecciona el nombre del mismo evento ya creado
    Se hace un fetch con ese mismo nombre y solo al sport se le establece 1 vs 1 deporte
    Se crea tambien la apuesta con el outcome de ganador por defecto en 2 porque ganan el doble
    Se pide de una vez el amount a apostar y el token se manda

Falta hacer la validacion de que si no se acepta la apuesta se devuelva el dinero al usuario
Y que se pueda no aceptar la apuesta.
**(Propuesta) Hacer un metodo rejectBet para poder devolver el dinero y eliminar el evento creado
si el otro rechaza la apuesta.


